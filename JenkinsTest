def artifactname = "133testing-app.jar"
def repoName = "rome-rp1-app-repo"
def pipelineName = "balu_scripted_pipeline"
def semanticVersion = "${env.BUILD_NUMBER}.0.0"
def packageName = "rome-rp1-package_${env.BUILD_NUMBER}"
def version = "${env.BUILD_NUMBER}.0"
def pkgName = "rome-rp1-package"

pipeline {
  agent any
 tools {
       maven 'Maven'
   } 
   environment {
	 SCANNER_HOME = tool 'SonarQube'
	buildArtifactsPath = "build_artifacts/${currentBuild.number}"
        validationResultsPath = ""
	}  
  stages {
  
    // Initialize pipeline
        stage('Initialize') {
            steps {
                script {
                    dockerImageName = "kekaichinose/web-app"

                    /**
                    * DevOps Config App related information
                    */
                    appName = 'PaymentDemo'
                    deployableName = 'Production'
                    componentName = "web-api-v1.0"
                    collectionName = "release-1.0"
                    /**
                    * Configuration File information to be uploaded
                    */ 
                    configFileFormat = 'yaml'
                    configFilePath = "k8s/helm/values.yml"
                    /**
                    * Devops Config exporter related information
                    */
                    exporterName = 'returnAllData-now' 
                    exporterArgs = ''
                    exportFormat = 'yaml'
                    /**
                    * Jenkins variables declared to be used in pipeline
                    */
                    exportFileName = "${buildArtifactsPath}/export_file-${appName}-${deployableName}-${currentBuild.number}.${exportFormat}"
                    changeSetId = ""
                    dockerImageTag = ""
                    snapshotName = ""
                    snapshotObject = ""
                    isSnapshotCreated = false
                    isSnapshotValidateionRequired = false
                    isSnapshotPublisingRequired = false
                    skipChange = false
                    
                    buildNumberArtifact = "grefId123"

                    /**
                    * Checking for parameters
                    */
                    if(params) {
                        echo "setting values from build parameter"
                        if(params.appName) {
                            appName = params.appName;
                        }
                        if(params.deployableName) {
                            deployableName = params.deployableName
                        }
                        if(params.componentName) {
                            componentName = params.componentName
                        }
                        if(params.collectionName) {
                            collectionName = params.collectionName
                        }
                        if(params.configFileFormat) {
                            configFileFormat = params.configFileFormat
                        }
                        if(params.configFilePath) {
                            configFilePath = params.configFilePath
                        }
                        if(params.exporterName) {
                            exporterName = params.exporterName
                        }
                        if(params.exporterArgs) {
                            exporterArgs = params.exporterArgs
                        }
                        if(params.exportFormat) {
                            exportFormat = params.exportFormat
                        }
                        if(params.skipChange) {
                            skipChange = params.skipChange
                        }
                    }
                }
                echo """---- Build Parameters ----
                applicationName: ${appName}
                namePath: ${componentName}
                configFile: ${configFilePath}
                dataFormat: ${configFileFormat}
                """
            }
        }
            
        // Build and publish application image
        stage('Build and test') {      
            steps {
                checkout scm    
                echo "scm checkout successful"
                
                script {
                    dockerImageTag = env.BUILD_NUMBER
                    dockerImageNameTag = "${dockerImageName}" + ":" + "${dockerImageTag}"

                    snDevopsArtifactPayload = '{"artifacts": [{"name": "' + dockerImageName + '",  "version": "' + "${dockerImageTag}" + '", "semanticVersion": "' + "0.1.${dockerImageTag}"+ '","repositoryName": "' + dockerImageName+ '"}, ],"stageName":"Build image","branchName": "main"}'  ;
                    echo "Docker image artifact: ${dockerImageNameTag} "
                    echo "snDevopsArtifactPayload: ${snDevopsArtifactPayload} "

                    snDevOpsArtifact(artifactsPayload:snDevopsArtifactPayload)
                }
            }
        } 
           steps {
             //sh 'mvn -B -DskipTests clean compile'
	        		sh 'mvn test'
           }
           post {
             always {
                junit "**/target/surefire-reports/*.xml"
             }
           }
        
// test stage
          steps {
              sh 'mvn test'
           }
           post {
             always {
                junit "**/target/surefire-reports/*.xml"
             }
           }
          steps {
                    echo 'Deploying the change....'
                    snDevOpsArtifact(artifactsPayload: """{"artifacts": [{"name": "${artifactname}", "version": "1.${env.BUILD_NUMBER}","semanticVersion": "1.${env.BUILD_NUMBER}.0","repositoryName": "${repoName}"}],"branchName":"master"}""")
          			snDevOpsPackage(name: "${pkgName}-${env.BUILD_NUMBER}", artifactsPayload: """{"artifacts":[{"name": "${artifactname}", "version": "1.${env.BUILD_NUMBER}", "repositoryName": "${repoName}"}], "branchName":"master"}""")
 
                    //snDevOpsArtifact(artifactsPayload: """{"artifacts": [{"name": "${artifactname}", "version": "1.${env.BUILD_NUMBER}-PATCH","semanticVersion": "1.${env.BUILD_NUMBER}.0-PATCH","repositoryName": "${repoName}"}],"branchName":"master"}""")
           			//snDevOpsPackage(name: "${pkgName}-${env.BUILD_NUMBER}", artifactsPayload: """{"artifacts":[{"name": "${artifactname}", "version": "1.${env.BUILD_NUMBER}-PATCH", "repositoryName": "${repoName}"}], "branchName":"master"}""")
                    
                 }
            
        // Validate code and config data
        stage('Validate') {
            parallel {
                // Validate configuration data changes
                stage('Config') {
                    stages('Config Steps') {
                        // Upload configuration data to DevOps Config
                        stage('Upload') {
                            steps {
                                sh "echo updating configfile with build number to allow rerun without config file changes"
                                sh "sed -i 's/${buildNumberArtifact}/${BUILD_NUMBER}/g' ${configFilePath}"
                                sh "echo uploading and auto-validating configuration file: ${configFilePath}"
                                script {
                                    changeSetId = snDevOpsConfigUpload(
                                        applicationName: "${appName}",
                                        target: 'component',
                                        namePath: "${componentName}",
                                        configFile: "${configFilePath}",
                                        autoCommit: 'true',
                                        autoValidate: 'true',
                                        dataFormat: "${configFileFormat}"
                                    )

                                    echo "Changeset: $changeSetId created"

                                    if(changeSetId != null) {
                                        // // DevOps Change Enable
                                        echo "Register changeset: ${changeSetId} to pipeline"
                                        changeSetRegResult = snDevOpsConfigRegisterPipeline(
                                            applicationName: "${appName}",
                                            changesetNumber: "${changeSetId}"
                                        )
                                        echo "Pipeline registration result: ${changeSetRegResult}"
                                        //
                                    } else {
                                        error "Changeset was not created"
                                    }
                                }
                            }
  steps {
                    echo 'sonar summaries....'
                    sonarSummaries()                    
                 }                     
}

                        // Auto-validation was set during upload; get status of snapshot
                        stage('Validate') {
                            steps {
                                echo "Triggering snDevOpsConfigGetSnapshots for applicationName:${appName},deployableName:${deployableName},changeSetId:${changeSetId}"

                                script {
                                    changeSetResults = snDevOpsConfigGetSnapshots(
                                        applicationName:"${appName}",
                                        deployableName:"${deployableName}",
                                        changesetNumber:"${changeSetId}",
                                        showResults: false,
                                        markFailed: false
                                    )
                                    if (!changeSetResults){
                                        isSnapshotCreated=false

                                        echo "No snapshots were created"
                                    } else {
                                        isSnapshotCreated = true;
                                        
                                        echo "Changeset result : ${changeSetResults}"

                                        def changeSetResultsObject = readJSON text: changeSetResults

                                        changeSetResultsObject.each {
                                            snapshotName = it.name
                                            snapshotObject = it
                                        }
                                        snapshotValidationStatus = snapshotObject.validation
                                        snapshotPublishedStatus = snapshotObject.published 
                                    }
                                }

                                script {
                                    echo "Snapshot object : ${snapshotObject}"

                                    validationResultsPath = "${snapshotName}_${currentBuild.projectName}_${currentBuild.number}.xml"
                                    
                                    if(snapshotObject.validation == "passed" || snapshotObject.validation == "passed_with_exception") {
                                        echo "Latest snapshot passed validation"
                                    } else {
                                        error "Latest snapshot failed"
                                    }
                                }
                            }
                        }

                        // Publish snapshot now that it passed validation
                        stage('Publish') {
                            when {
                                expression { (snapshotValidationStatus == "passed" || snapshotValidationStatus == "passed_with_exception") && snapshotPublishedStatus == false }
                            }
                            steps {
                                script {
                                    echo "Step to publish snapshot applicationName:${appName},deployableName:${deployableName} snapshotName:${snapshotName}"
                                    publishSnapshotResults = snDevOpsConfigPublish(applicationName:"${appName}",deployableName:"${deployableName}",snapshotName: "${snapshotName}")
                                    echo "Publish result for applicationName:${appName},deployableName:${deployableName} snapshotName:${snapshotName} is ${publishSnapshotResults} "
                                }
                            }
                        }

                        // Export published snapshot to be used by downstream deployment tools
                        stage('Export') {
                            steps {
                                script {
                                    echo "Exporting config data for App: ${appName}, Deployable: ${deployableName}, Exporter: ${exporterName} "
                                    echo "Export file name ${exportFileName}"
                                    // create build artifacts dir if not created yet
                                    sh "mkdir -p ${buildArtifactsPath}"
                                    
                                    echo "<<<<<<<<< Starting config data export >>>>>>>>"
                                    exportResponse = snDevOpsConfigExport(
                                            applicationName: "${appName}",
                                            snapshotName: "${snapshotObject.name}",
                                            deployableName: "${deployableName}",
                                            exporterFormat: "${exportFormat}",
                                            fileName: "${exportFileName}",
                                            exporterName: "${exporterName}",
                                            exporterArgs: "${exporterArgs}"
                                    )
                                    echo "RESPONSE FROM EXPORT : ${exportResponse}"
                                }
                            }
                        }
                    }
                }

                // Validate application code changes (SIMULATED)
                stage('Code') { 
                    stages {
                        stage('jUnit Test'){ 
                            steps {
                                echo "Running unit tests..."
                            }
                        }
                        
                        stage('SonarQube analysis') {
                            steps {
                                echo "Running code quality analysis..."
                            }
                        }
                    }    
                }
            }
        }

        // Deploy configuration data to UAT environment
        stage('UAT Deployment') {
            steps {
                sleep(time:5,unit:"SECONDS")
            }
        }
        
        // Run functional tests
        stage ('Functional Testing') {
            parallel {      
                stage('Selenium API') { 
                    steps {
                        echo "Selenium API..2..3..4"
                        sleep(time:5,unit:"SECONDS")
                        echo "Selenium API..2..3..4"
                    }
                }
                stage('Selenium UI') {
                    steps {
                        echo "Selenium UI..2..3..4"
                        sleep(time:7,unit:"SECONDS")
                        echo "Selenium API..2..3..4"
                    }
                }
            }
        }
        
        // Submit change management review
        stage('Change Management') {
            steps {
                //node('built-in')
                script {
                    // Enable change acceleration
                    if(skipChange) {
                        echo "<<< Skip DevOps Change >>>"
                    } else {
                        echo "DevOps Change - trigger change request"
                        snDevOpsChange(
                                applicationName: "${appName}",
                                snapshotName: "${snapshotName}"
                        )
                        // ALTERNATE - CR with application service details
                        /*echo "DevOps Change - trigger change request"
                        snDevOpsChange(changeRequestDetails: """{
                                "setCloseCode": false,
                                "attributes": {
                                    "category": "DevOps",
                                    "priority": "3",
                                    "cmdb_ci": {
                                        "name": "Servers - PaymentDemo - Production"
                                    },
                                    "business_service": {
                                        "name": "PaymentDemo_Production_1"
                                    }
                                }
                        }""")
                        */
                    }
                }     
            }
        }

        // Deploy application code and configuration data to production environment
        stage('Deploy to Production') {
                steps {
                    script {
                            echo "Show exported config data from file name ${exportFileName}"
                            echo " ++++++++++++ BEGIN OF File Content ***************"
                            sh "cat ${exportFileName}"
                            echo " ++++++++++++ END OF File content ***************"
                            echo "Exported config data handed off to deployment tool"
                            echo "********************** BEGIN Deployment ****************"
                            echo "Applying docker image ${dockerImageNameTag}"
                            echo "********************** END Deployment ****************"
                    }
                }
 steps {
                    
                    echo 'Deploying the change....'
                    //snDevOpsChange(ignoreErrors:false)
		    snDevOpsChange changeCreationTimeOut: 3600, changeRequestDetails: '{ "attributes": { "short_description": "Test description", "priority": "1", "start_date": "2021-02-05 08:00:00", "end_date": "2022-04-05 08:00:00", "justification": "test justification", "description": "test description", "cab_required": true, "comments": "This update for work notes is from jenkins file", "work_notes": "test work notes", "assignment_group": "a715cd759f2002002920bde8132e7018" }, "setCloseCode": false }', changeStepTimeOut: 18000, pollingInterval: 30
 
                    //snDevOpsArtifact(artifactsPayload: """{"artifacts": [{"name": "${artifactname}", "version": "1.${env.BUILD_NUMBER}","semanticVersion": "1.${env.BUILD_NUMBER}.0","repositoryName": "${repoName}"}],"branchName":"master"}""")
           			//snDevOpsPackage(name: "${pkgName}-${env.BUILD_NUMBER}", artifactsPayload: """{"artifacts":[{"name": "${artifactname}", "version": "1.${env.BUILD_NUMBER}", "repositoryName": "${repoName}"}], "branchName":"master"}""")
                    
                 }        
}

 }
 
}

def sonarSummaries() {

   withSonarQubeEnv('Sonar_Cloud') {
       sh '${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectKey=paymentdemo -Dsonar.organization=harsh-pmb -Dsonar.branch.name=main -Dsonar.language=java -Dsonar.java.binaries=target//classes/'
   }
	
    //withSonarQubeEnv('sonarQube_local') {
       	//sh '${SCANNER_HOME}/bin/sonar-scanner -Dproject.settings=${SCANNER_HOME}/conf/qa-sonar-scanner.properties'
   		// sh '${SCANNER_HOME}/bin/sonar-scanner -Dproject.settings=${SCANNER_HOME}/conf/sonar-scanner.properties'
	//}
	
} // end of def sonarsummaries
